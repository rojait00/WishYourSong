@using SpotifyAPI.Web
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage

@inject WishYourSong.Data.SongDatabase db
@inject WishYourSong.Data.Votes votes

@inject ProtectedLocalStorage BrowserStorage


<h3>Playlist</h3>

<RadzenDataGrid @ref="trackGrid" AllowFiltering="true" AllowPaging="true" PageSize="15" AllowSorting="true" Data="@db.Tracks" TItem="FullTrack">
    <Columns>
        <RadzenDataGridColumn TItem="FullTrack" Title="Title" Filterable="true" Sortable="true" Width="40%">
            <Template Context="song">
                @song.Name
            </Template>
        </RadzenDataGridColumn>

        <RadzenDataGridColumn TItem="FullTrack" Title="Artist" Filterable="true" Sortable="true" Width="40%">
            <Template Context="song">
                @string.Join(", ", song.Artists.Select(x=> x.Name).OrderBy(x=>x))
            </Template>
        </RadzenDataGridColumn>

        <RadzenDataGridColumn TItem="FullTrack" Title="Likes" Filterable="true" Sortable="true" TextAlign="TextAlign.Center" Width="10%">
            <Template Context="song">
                @votes.GetVotes(song.Id)
            </Template>
        </RadzenDataGridColumn>

        <RadzenDataGridColumn TItem="FullTrack" Title="Vote" Width="100px" Filterable=false Sortable=false TextAlign=TextAlign.Center>
            <Template Context="song">
                <RadzenButton ButtonStyle="ButtonStyle.Success" Icon="thumb_up" Class="m-1" Click=@(() => votes.AddVoteAsync(song, true)) />
                <RadzenButton ButtonStyle="ButtonStyle.Danger" Icon="thumb_down" Class="m-1" Click=@(() => votes.AddVoteAsync(song, false)) />
            </Template>
        </RadzenDataGridColumn>
    </Columns>
</RadzenDataGrid>


@code {

    RadzenDataGrid<FullTrack>? trackGrid;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await votes.Init(BrowserStorage);
            await db.Init(votes);
            if (trackGrid != null)
            {
                await trackGrid.Reload();
            }
        }

        await base.OnAfterRenderAsync(firstRender);
    }
}
